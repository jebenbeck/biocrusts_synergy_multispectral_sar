/******************************************************************************

Landsat Time Series

Description:
Generates a time series of all available Landsat 4-8 scenes

Implemented:
  - Cloud masking 
  - Data conversion
  - Masking to AOI
  - Filtering to export all with <20% cloud cover based on the AOI
  - Calculation of several multispectal indices

*******************************************************************************/



// PARAMETERS 
// --------------------------------------------------------------------------


// Required tools
var tools = require('users/fitoprincipe/geetools:tools');
var batch = require('users/fitoprincipe/geetools:batch');
var image_processing = require('users/jakobrieser1997/Biocrusts:Functions/Image processing');
var regional_parameters = require('users/jakobrieser1997/Biocrusts:Functions/Regional parameters');
var landsat = require('users/jakobrieser1997/Biocrusts:Functions/Landsat');

// define time range
var START_DATE = "2021-01-01";
var END_DATE = "2021-12-31";

// Processing options
var RESAMPLING = "NO";
var FUSE_S2 = "NO";
var OUTPUT_RESOLUTION = 30;

// Export options
var EXPORT_ALL_IMAGES = "NO";
var EXPORT_TABLE = "NO";
var EXPORT_METRICS = "NO";

// Study area parameters
var REGION = "Negev";
var PARAMETERS = regional_parameters.get_parameters(REGION);
print("Parameters " + PARAMETERS.AOI_NAME, PARAMETERS);



// Generate analysis-ready Landsat data  
// --------------------------------------------------------------------------


// Generate Landsat 4, 5, 7, 8 collections: 
var col_L4_raw = landsat.get_data ("L4", PARAMETERS.AOI, START_DATE, END_DATE);
var col_L5_raw = landsat.get_data ("L5", PARAMETERS.AOI, START_DATE, END_DATE);
var col_L7_raw = landsat.get_data ("L7", PARAMETERS.AOI, START_DATE, END_DATE);
var col_L8_raw = landsat.get_data ("L8", PARAMETERS.AOI, START_DATE, END_DATE);

// Merge collections and sort by date
var col_LS_merged = col_L4_raw.merge(col_L5_raw)
                              .merge(col_L7_raw)
                              .merge(col_L8_raw)
                              .sort("system:time_start")
                              .map(image_processing.add_date);

// Select first images when multiple for single dates are available:
var col_LS_unique = image_processing.first_images(col_LS_merged);

// remove bad quality imagery
var col_LS_quality = image_processing.remove_dates(col_LS_unique, PARAMETERS.LS_REMOVE_DATES);

// Apply cloud, shadow and snow masking
var col_LS_masked = col_LS_quality.map(landsat.mask_clear_pixels);

// Cast and select bands:
var col_LS_casted = col_LS_masked.map(landsat.casting);

// Add the mask cover
var col_LS_maskcover = image_processing.calculate_clear_area(col_LS_casted, PARAMETERS.AOI);

// filter the collection by mask cover
var col_LS_clear = col_LS_maskcover.filterMetadata('MASK_COVER', 'less_than', 20);

// cast values to match S2 data
if (FUSE_S2 == "YES") {
  var col_LS_clear = landsat.casting_LS_S2 (col_LS_clear, PARAMETERS.LS_SLOPES, PARAMETERS.LS_INTERCEPTS);
}

// add indices
var col_LS_indices = image_processing.indices(col_LS_clear);

// Resampling:
if (RESAMPLING == "YES") {
  var col_LS_indices = image_processing.resampling(col_LS_indices, PARAMETERS.EPSG, OUTPUT_RESOLUTION);
}

// Clip to study area
var col_LS_aoi = image_processing.clipping(col_LS_indices, PARAMETERS.AOI);

//calculate spatiotemporal_metrics
var col_LS_metrics = image_processing.spatiotemporal_metrics(col_LS_aoi, 
        ["median", "stDev", "perclq", "percuq"]);


// VISUALIZSATION 
// --------------------------------------------------------------------------


// Print the products
print("Raw merged Landsat collection", col_LS_merged);
print("Unique merged Landsat collection", col_LS_unique);
print("Good quality Landsat collection", col_LS_quality);
print("Clear Landsat collection", col_LS_clear);
print("Final Landsat collection", col_LS_aoi);

Map.centerObject(PARAMETERS.AOI);

//Add masked image layer

var LS_example_img = col_LS_aoi.filterDate("2021-07-08", "2021-07-10").first(); 
//print("Regression Img", LS_example_img);
//Map.addLayer(LS_example_img, {bands: ['R', 'G', 'B'], min: 0, max: 0.3}, 'Regression Image');

/*****
Export.image.toDrive({
  image: LS_example_img,
  folder: "Regression_Images",
  description: "Regression_image_Landsat_" + PARAMETERS.AOI_NAME,
  fileNamePrefix: "Regression_Landsat_" + PARAMETERS.AOI_NAME,
  scale: OUTPUT_RESOLUTION,
  region: PARAMETERS.AOI,
  crs: PARAMETERS.EPSG
});

*****/

// EXPORT 
// --------------------------------------------------------------------------

// Export metadata table of acquisitons
if (EXPORT_TABLE == 'YES') {
  Export.table.toDrive({
    collection: col_LS_aoi,
    folder: 'Master Thesis/Acquisitions',
    description: 'Acquisitions_Landsat_' + PARAMETERS.AOI_NAME,
    fileFormat: "CSV",
    selectors:["DATE_STR", "DATE_TIME", "LANDSAT_PRODUCT_ID",
               "SPACECRAFT_ID", "MASK_COVER"]
  });
}

// Export all individual images
if (EXPORT_ALL_IMAGES == 'YES') {
  batch.Download.ImageCollection.toDrive(col_LS_aoi, "Master Thesis/Landsat/Images/" + PARAMETERS.AOI_NAME,
                  {name: "{system_date}" + "_" + "{SPACECRAFT_ID}" + "_" + PARAMETERS.AOI_NAME,
                    scale: OUTPUT_RESOLUTION,
                    region: PARAMETERS.AOI,
                    crs: PARAMETERS.EPSG,
                    type: 'float'});
}

// Export metrics
if (EXPORT_METRICS == 'YES') {
  batch.Download.ImageCollection.toDrive(col_LS_metrics, 
                                         "Master Thesis/Landsat/Metrics/" + PARAMETERS.AOI_NAME,
                  {name: "{metric}" + "_" +
                       "Landsat" + "_" +
                       PARAMETERS.AOI_NAME +"_" +
                       START_DATE + "_" + 
                       END_DATE,
                  scale: OUTPUT_RESOLUTION,
                  region: PARAMETERS.AOI,
                  crs: PARAMETERS.EPSG,
                  type: 'float'});
}



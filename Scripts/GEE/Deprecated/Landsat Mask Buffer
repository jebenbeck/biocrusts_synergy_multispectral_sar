var cld = require('users/fitoprincipe/geetools:cloud_masks');
 
 
// Load in ROI
var my_aoi = ee.FeatureCollection('users/jakobrieser1997/Biocrusts/AOI_Lieberose');

// FUNCTIONS 
// --------------------------------------------------------------------------

// Masking clouds, shadow, cirrus and snow using QA band:
var mask_clear_pixels_with_buffer = function (image) {
  // Get the pixel QA band.
  var qa = image.select('QA_PIXEL');
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  // Use LeftShift-Operators to define Bit values
  var dilated_value = (1 << 3);
  var cloud_value = (1 << 3);
  var cirrus_value = (1 << 2);
  var shadow_value = (1 << 4);
  var snow_value = (1 << 5);
  // Create masks
  var dilated_mask = qa.bitwiseAnd(dilated_value).eq(0);
  var cloud_mask = qa.bitwiseAnd(cloud_value).eq(0);
  var shadow_mask = qa.bitwiseAnd(shadow_value).eq(0);
  var cirrus_mask = qa.bitwiseAnd(cirrus_value).eq(0);
  var snow_mask = qa.bitwiseAnd(snow_value).eq(0);
  // Given bit values should be set to zero for masking.
  var combined_mask = cloud_mask.and(shadow_mask)
                                .and(dilated_mask)
                                .and(cirrus_mask)
                                .and(snow_mask);
  // 90m Buffer for the mask:
  var mask = combined_mask.focal_min({radius: 90, units: 'meters'});
  return image.updateMask(mask);
};


// Masking clouds, shadow, cirrus and snow using QA band:
var mask_clear_pixels_no_buffer = function (image) {
  // Get the pixel QA band.
  var qa = image.select('QA_PIXEL');
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  // Use LeftShift-Operators to define Bit values
  var dilated_value = (1 << 3);
  var cloud_value = (1 << 3);
  var cirrus_value = (1 << 2);
  var shadow_value = (1 << 4);
  var snow_value = (1 << 5);
  // Create masks
  var dilated_mask = qa.bitwiseAnd(dilated_value).eq(0);
  var cloud_mask = qa.bitwiseAnd(cloud_value).eq(0);
  var shadow_mask = qa.bitwiseAnd(shadow_value).eq(0);
  var cirrus_mask = qa.bitwiseAnd(cirrus_value).eq(0);
  var snow_mask = qa.bitwiseAnd(snow_value).eq(0);
  // Given bit values should be set to zero for masking.
  var combined_mask = cloud_mask.and(shadow_mask)
                                .and(dilated_mask)
                                .and(cirrus_mask)
                                .and(snow_mask);
  
    return image.updateMask(combined_mask);

  
};



// APPLICATION 
// --------------------------------------------------------------------------

var L8_col_C2_1 = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2")
  .filterBounds(my_aoi)
  .filterDate('2017-05-01', '2018-05-01'); //for clouds
  //.filterDate('2017-12-09', '2021-12-11'); //for snow
  //.filterDate('2018-03-19', '2018-03-21'); //for cirrus

// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

var L8_col_C2 = L8_col_C2_1.map(applyScaleFactors);


// apply cloud mask based on QA layer (C2):  
var L8_col_masked = L8_col_C2.map(mask_clear_pixels_no_buffer);
var L8_col_masked_buf = L8_col_C2.map(mask_clear_pixels_with_buffer);


// VISUALIZATION 
// --------------------------------------------------------------------------



print("Raw collection C2", L8_col_C2);
print("collection with mask", L8_col_masked_buf);

var visualization = {
  min: 0.0,
  max: 0.3,
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
};



Map.addLayer(L8_col_C2.first(), visualization, 'Raw Image');
Map.addLayer(L8_col_masked.first(), visualization, 'Masked without buffer');
Map.addLayer(L8_col_masked_buf.first(), visualization, 'Masked with buffer');
Map.addLayer(L8_col_masked_buf.first(),
              {min: 0.0, max: 1, bands: ['mask'],}, 'Buffered Mask');
Map.addLayer(L8_col_masked_buf.first(),
              {min: 0.0, max: 1, bands: ['combined_mask'],}, 'Combined Mask');
Map.centerObject(my_aoi);
